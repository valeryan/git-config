[color]
	ui = true
[user]
	name = Samuel Hilson
	email = samuelrhilson@gmail.com
[branch]
	autosetuprebase = always
[push]
	default = current
[pager]
	branch = false

[core]
	autocrlf = false
[diff]
    tool = vscode
[difftool "vscode"]
    cmd = code --wait --diff $LOCAL $REMOTE
[merge]
    tool = vscode
[mergetool "vscode"]
    cmd = code --wait $MERGED
[alias]
	lg1 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
	lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
	lg = !"git lg1"
	upstream-name = !git remote | egrep -o '(upstream|origin)' | tail -1
	prune-merged = "!f() { \
	local head_branch=$(git symbolic-ref --short HEAD); \
	git fetch --prune; \
	local branches_to_delete=$(git branch --merged $(git upstream-name)/$(git remote show $(git upstream-name) | awk '/HEAD branch/ {print $NF}') \
		| grep --invert-match '\\*' \
		| tr '\\n' ' ' \
		| xargs); \
	if [ -n \"$branches_to_delete\" ]; then \
		git checkout --quiet $(git remote show $(git upstream-name) | awk '/HEAD branch/ {print $NF}'); \
		git branch --delete $branches_to_delete; \
		echo \"Pruned branches: $branches_to_delete\"; \
		git checkout --quiet $head_branch; \
	else \
		echo \"No branches to prune.\"; \
	fi \
	}; f"
  
