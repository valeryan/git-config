[color]
	ui = true
[user]
	name = Samuel Hilson
	email = samuelrhilson@gmail.com
[branch]
	autosetuprebase = always
[push]
	default = current
[pager]
	branch = false

[core]
	autocrlf = false
[diff]
    tool = vscode
[difftool "vscode"]
    cmd = code --wait --diff $LOCAL $REMOTE
[merge]
    tool = vscode
[mergetool "vscode"]
    cmd = code --wait $MERGED
[alias]
	lg1 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
	lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
	lg = !"git lg1"
	default-branch = "!git symbolic-ref refs/remotes/origin/HEAD | sed 's#^refs/remotes/origin/##'"
	pull-default = "!f() { \
		if [[ -n $(git status -s) ]]; then \
			echo 'ERROR: Working tree must be clean before pulling.'; \
		else \
			default_branch=$(git default-branch); \
			git checkout --quiet \"$default_branch\" && \
			git pull --quiet; \
		fi \
	}; f"
	prune-merged = "!f() { \
		if ! git diff --quiet; then \
			echo 'Error: You have uncommitted changes. Please commit or stash them first.'; \
			exit 1; \
		fi; \
		git pull-default && \
		default_branch=$(git default-branch) && \
		merged_branches=$(git branch --merged \"$default_branch\" | grep --invert-match \"\\*\" | xargs); \
		if [[ -n \"$merged_branches\" ]]; then \
			git checkout --quiet \"$default_branch\" && \
			git branch --delete $merged_branches && \
			echo \"Pruning Complete\"; \
		else \
			echo \"No branches to prune.\"; \
		fi \
	}; f"
  
